Traceback (most recent call last):
  File "/Users/Omid.Solari/miniconda3/envs/interview/lib/python3.13/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "/Users/Omid.Solari/miniconda3/envs/interview/lib/python3.13/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/Users/Omid.Solari/miniconda3/envs/interview/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "/Users/Omid.Solari/miniconda3/envs/interview/lib/python3.13/asyncio/base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "/Users/Omid.Solari/miniconda3/envs/interview/lib/python3.13/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "/Users/Omid.Solari/miniconda3/envs/interview/lib/python3.13/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/Omid.Solari/miniconda3/envs/interview/lib/python3.13/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Prepare lag features
daily_summary = daily_summary.sort_values(["server_id", "date"])
daily_summary["prev_avg_cpu"] = daily_summary.groupby("server_id")["avg_cpu"].shift(1)
daily_summary["prev_avg_memory"] = daily_summary.groupby("server_id")["avg_memory"].shift(1)
daily_summary["prev_total_power"] = daily_summary.groupby("server_id")["total_power"].shift(1)
daily_summary["prev_high_util_days"] = daily_summary.groupby("server_id")["high_util_days"].shift(1)
daily_summary = daily_summary.dropna()

features = ["prev_avg_cpu", "prev_avg_memory", "prev_total_power", "prev_high_util_days"]
X = daily_summary[features]
y = daily_summary["total_cost"]

# Train/Test split
unique_dates = sorted(daily_summary["date"].unique())
split_idx = int(len(unique_dates) * 0.8)
train_dates = unique_dates[:split_idx]
test_dates = unique_dates[split_idx:]

X_train = X[daily_summary["date"].isin(train_dates)]
X_test = X[daily_summary["date"].isin(test_dates)]
y_train = y[daily_summary["date"].isin(train_dates)]
y_test = y[daily_summary["date"].isin(test_dates)]

# Models
models = {
    "LinearRegression": LinearRegression(),
    "RandomForest": RandomForestRegressor(n_estimators=100, random_state=42)
}

results = []
for name, model in models.items():
    model.fit(X_train, y_train)
    preds = model.predict(X_test)
    mae = mean_absolute_error(y_test, preds)
    rmse = mean_squared_error(y_test, preds, squared=False)
    r2 = r2_score(y_test, preds)
    results.append((name, mae, rmse, r2))
    
import pandas as pd
pd.DataFrame(results, columns=["Model", "MAE", "RMSE", "R2"])
------------------


[31m---------------------------------------------------------------------------[39m
[31mTypeError[39m                                 Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[2][39m[32m, line 39[39m
[32m     37[39m preds = model.predict(X_test)
[32m     38[39m mae = mean_absolute_error(y_test, preds)
[32m---> [39m[32m39[39m rmse = [43mmean_squared_error[49m[43m([49m[43my_test[49m[43m,[49m[43m [49m[43mpreds[49m[43m,[49m[43m [49m[43msquared[49m[43m=[49m[38;5;28;43;01mFalse[39;49;00m[43m)[49m
[32m     40[39m r2 = r2_score(y_test, preds)
[32m     41[39m results.append((name, mae, rmse, r2))

[36mFile [39m[32m~/miniconda3/envs/interview/lib/python3.13/site-packages/sklearn/utils/_param_validation.py:194[39m, in [36mvalidate_params.<locals>.decorator.<locals>.wrapper[39m[34m(*args, **kwargs)[39m
[32m    191[39m func_sig = signature(func)
[32m    193[39m [38;5;66;03m# Map *args/**kwargs to the function signature[39;00m
[32m--> [39m[32m194[39m params = [43mfunc_sig[49m[43m.[49m[43mbind[49m[43m([49m[43m*[49m[43margs[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m
[32m    195[39m params.apply_defaults()
[32m    197[39m [38;5;66;03m# ignore self/cls and positional/keyword markers[39;00m

[36mFile [39m[32m~/miniconda3/envs/interview/lib/python3.13/inspect.py:3264[39m, in [36mSignature.bind[39m[34m(self, *args, **kwargs)[39m
[32m   3259[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mbind[39m([38;5;28mself[39m, /, *args, **kwargs):
[32m   3260[39m [38;5;250m    [39m[33;03m"""Get a BoundArguments object, that maps the passed `args`[39;00m
[32m   3261[39m [33;03m    and `kwargs` to the function's signature.  Raises `TypeError`[39;00m
[32m   3262[39m [33;03m    if the passed arguments can not be bound.[39;00m
[32m   3263[39m [33;03m    """[39;00m
[32m-> [39m[32m3264[39m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[43m.[49m[43m_bind[49m[43m([49m[43margs[49m[43m,[49m[43m [49m[43mkwargs[49m[43m)[49m

[36mFile [39m[32m~/miniconda3/envs/interview/lib/python3.13/inspect.py:3253[39m, in [36mSignature._bind[39m[34m(self, args, kwargs, partial)[39m
[32m   3243[39m         [38;5;28;01mraise[39;00m [38;5;167;01mTypeError[39;00m(
[32m   3244[39m             [33m'[39m[33mgot some positional-only arguments passed as [39m[33m'[39m
[32m   3245[39m             [33m'[39m[33mkeyword arguments: [39m[38;5;132;01m{arg!r}[39;00m[33m'[39m.format(
[32m   (...)[39m[32m   3250[39m             ),
[32m   3251[39m         )
[32m   3252[39m     [38;5;28;01melse[39;00m:
[32m-> [39m[32m3253[39m         [38;5;28;01mraise[39;00m [38;5;167;01mTypeError[39;00m(
[32m   3254[39m             [33m'[39m[33mgot an unexpected keyword argument [39m[38;5;132;01m{arg!r}[39;00m[33m'[39m.format(
[32m   3255[39m                 arg=[38;5;28mnext[39m([38;5;28miter[39m(kwargs))))
[32m   3257[39m [38;5;28;01mreturn[39;00m [38;5;28mself[39m._bound_arguments_cls([38;5;28mself[39m, arguments)

[31mTypeError[39m: got an unexpected keyword argument 'squared'

